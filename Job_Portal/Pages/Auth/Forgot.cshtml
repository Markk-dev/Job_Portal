@page
@model Job_Portal.Pages.Auth.ForgotModel
@{
    ViewData["Title"] = "Password Recovery";
    ViewData["HideNavbar"] = true;
}
<head>
    <link rel="stylesheet" href="~/css/global.css" asp-append-version="true" />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link href="~/css/forgot.css" rel="stylesheet" />
</head>
<div class="auth-container">
    <h1 class="auth-title">Password Recovery</h1>
    <p class="auth-terms">
        Enter the email address associated with your account.
    </p>

    <form method="post" class="register-form" id="forgotPasswordForm">
        @Html.AntiForgeryToken()
        <div class="form-group">
            <input name="Email" id="emailInput" class="form-control" placeholder="Email" required />
        </div>
        <button type="submit" class="email-button" id="submitButton">Send OTP</button>
    </form>

 
    <div id="otpSection" style="display: none;">
        <div class="form-group" style="margin-top: 20px;">
            <input type="text" id="otpInput" class="form-control" placeholder="Enter OTP" />
        </div>
        <button type="button" class="email-button" id="verifyOtpButton">Verify OTP</button>
    </div>


    <div id="newPasswordSection" style="display: none;">
        <div class="form-group" style="margin-top: 20px;">
            <input type="password" id="newPasswordInput" class="form-control" placeholder="New Password" />
        </div>
        <div class="form-group">
            <input type="password" id="confirmPasswordInput" class="form-control" placeholder="Confirm Password" />
        </div>
        <button type="button" class="email-button" id="updatePasswordButton">Update Password</button>
    </div>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div id="statusMessage" class="error-message" style="display: block;">
            @Model.ErrorMessage
        </div>
    }


    <div id="statusMessage"></div>
    <div class="auth-links">
        <p>
            Remembered your password? <a asp-page="/Auth/Login" class="auth-link">Sign in</a>
        </p>
    </div>
</div>


<script>
    let generatedOTP = '';
    let userEmail = '';

    function generateOTP() {
        return Math.floor(100000 + Math.random() * 900000).toString();
    }

    function showMessage(message, isSuccess) {
        const statusElement = document.getElementById('statusMessage');
        statusElement.textContent = message;
        statusElement.className = isSuccess ? 'success-message' : 'error-message';
        statusElement.style.display = 'block';


        if (isSuccess) {
            setTimeout(() => {
                statusElement.style.display = 'none';
            }, 5000);
        }
    }

        document.getElementById('forgotPasswordForm').addEventListener('submit', async (e) => {
        e.preventDefault();

        const email = document.getElementById('emailInput').value.trim();
        const submitButton = document.getElementById('submitButton');

        if (!email) {
            showMessage('Email is required!', false);
            return;
        }

        submitButton.disabled = true;
        submitButton.textContent = "Checking...";

        try {
            // Check if email exist
            const checkResponse = await fetch('/Auth/Forgot?handler=CheckEmail', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ email: email })
            });

            const checkResult = await checkResponse.json();

            if (!checkResponse.ok || !checkResult.exists) {
                throw new Error(checkResult.message || 'Email not found');
            }

            //Only Generate if email exists
            generatedOTP = generateOTP();
            userEmail = email;

            const response = await axios.post("https://api.emailjs.com/api/v1.0/email/send", {
                service_id: "service_hxb425t",
                template_id: "template_muqhzus",
                user_id: "FqDte2dDwEqmzp5rf",
                template_params: {
                    user_email: email,
                    OTP_CODE: generatedOTP,
                    title: "Password Recovery OTP"
                }
            });

            console.log("EmailJS API Response:", response.data);
            showMessage("OTP sent to your email!", true);
            document.getElementById('otpSection').style.display = 'block';

        } catch (error) {
            console.error("Error:", error.message);
            showMessage(error.message, false);
        } finally {
            submitButton.disabled = false;
            submitButton.textContent = "Resend OTP";
        }
    });


    document.getElementById('verifyOtpButton').addEventListener('click', () => {
        const enteredOTP = document.getElementById('otpInput').value.trim();

        if (!enteredOTP) {
            showMessage('Please enter the OTP', false);
            return;
        }

        if (enteredOTP === generatedOTP) {
            showMessage('OTP verified successfully!', true);

            document.getElementById('otpSection').style.display = 'none';
            document.getElementById('newPasswordSection').style.display = 'block';
        } else {
            showMessage('Invalid OTP. Please try again.', false);
        }
    });


    document.getElementById('updatePasswordButton').addEventListener('click', async () => {
        const newPassword = document.getElementById('newPasswordInput').value;
        const confirmPassword = document.getElementById('confirmPasswordInput').value;

        if (!newPassword || !confirmPassword) {
            showMessage('Both password fields are required', false);
            return;
        }

        if (newPassword !== confirmPassword) {
            showMessage('Passwords do not match', false);
            return;
        }

        if (newPassword.length < 8) {
            showMessage('Password must be at least 8 characters', false);
            return;
        }


        showMessage('Password updated successfully!', true);


        setTimeout(() => {
            window.location.href = "/Auth/Login";
        }, 2000);
    });

</script>
